<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- name space는 MovieRepo의 fully qualified name으로 설정한다. -->
<mapper namespace="com.proj.community.model.dao.UserDao">
	<resultMap id="userMap" type="User">
		<result column="user_id" property="userId"/>
		<result column="user_password" property="password"/>
		<result column="user_email" property="email"/>
		<result column="user_nickname" property="nickname"/>
		<result column="user_image" property="image"/>
		<result column="user_join_date" property="joinDate"/>
	</resultMap>
	
	<!-- 닉네임으로 조회-->
	<select id="read" parameterType="String" resultMap="userMap">
		SELECT *
		FROM user
		WHERE user_nickname = #{nickname}
	</select>
	
	<!-- 닉네임 중복체크-->
	<select id="nicknameCheck" parameterType="String" resultType="int">
		SELECT count(*)
		FROM user
		WHERE user_nickname = #{nickname}
	</select>
	
	<!-- id중복체크-->
	<select id="idCheck" parameterType="String" resultType="int">
		SELECT count(*)
		FROM user
		WHERE user_id = #{id}
	</select>
	
	<!-- 이메일중복체크-->
	<select id="emailCheck" parameterType="String" resultType="int">
		SELECT count(*)
		FROM user
		WHERE user_email = #{email}
	</select>
	
	<insert id="create" parameterType="User">
		INSERT INTO user(user_id, user_password, user_email, user_nickname, user_image)
		VALUES(#{userId}, #{password}, #{email}, #{nickname}, #{image})
	</insert>
	
	<update id="update" parameterType="User">
		UPDATE user
		SET user_password = #{password},
		user_email = #{email},
		user_nickname = #{nickname},
		user_image = #{image}
		WHERE user_id = #{userId}
	</update>
	
	<delete id="delete" parameterType="User">
		DELETE FROM user
		WHERE user_id = #{userId} AND user_password = #{password}
	</delete>
	
	<select id="login" parameterType="User" resultType="int">
		SELECT count(*)
		FROM user
		WHERE user_id = #{userId} AND user_password = #{password}
	</select>
	
	<select id="readNickname" parameterType="String" resultType="String">
		SELECT user_nickname
		FROM user
		WHERE user_id = #{userId}
	</select>
	
</mapper>